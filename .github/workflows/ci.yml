name: CI Pipeline

on:
  push:
    branches:
      - dev

jobs:
  dev-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Run tests
        id: run_tests
        run: |
          python -m unittest discover -s tests -v || echo "Tests failed" && echo "TESTS_FAILED=true" >> $GITHUB_ENV
          # Si les tests échouent, cela ne fera pas échouer dev-branch, mais enregistre l'échec dans une variable d'environnement.


  merge-to-master:
    runs-on: ubuntu-latest
    needs: dev-branch
    if: ${{ success() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Git user name and email
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Fetch all branches
        run: |
          git fetch --all  # Assurez-vous que toutes les branches sont à jour

      - name: Show branch status
        run: |
          git status  # Vérifiez l'état actuel des branches
          git log --oneline --graph --decorate  # Visualisez l'historique des commits

      - name: Fast-forward master branch
        run: |
          git checkout master
          git pull origin master --rebase  # Réalisez un rebase pour garantir que master est à jour avant la fusion
          git merge dev --allow-unrelated-histories || (echo "Merge failed, investigating"; exit 1)

  failure-recovery:
    runs-on: ubuntu-latest
    needs: dev-branch
    if: env.TESTS_FAILED == 'true'  # Vérifie si la variable indique un échec de test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log error information
        run: |
          echo "CI pipeline failed. Checking last 10 commits."
          git log -n 10 --oneline  # Affiche les derniers commits pour diagnostic

      - name: Fetch and reset dev branch
        run: |
          git fetch origin
          git checkout dev
          git reset --hard HEAD~1  # Annule le dernier commit fautif dans la branche dev
          git push origin dev --force  # Met à jour dev sans le commit fautif

      - name: Create failure branch with removed commit
        run: |
          unique_id=$(date +%s)
          failure_branch="failures/${unique_id}"  # Crée un nom unique pour la branche d'échec
          git checkout -b $failure_branch HEAD@{1}  # Place le dernier commit annulé sur cette branche
          git push origin $failure_branch  # Pousse la branche failures/<numéro_unique> sur le dépôt distant
